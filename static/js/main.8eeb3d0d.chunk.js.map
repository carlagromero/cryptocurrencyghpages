{"version":3,"sources":["cryptocurrencies.png","components/ErrorMessage.js","components/Form.js","components/Result.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ErrorMessage","_ref","message","react_default","a","createElement","className","Form","state","cryptocurrencies","currency","crypto","error","handleChange","e","_e$target","target","name","value","_this","setState","Object","defineProperty","handleSubmit","preventDefault","_this$state","parameters","props","quote","setTimeout","axios","get","then","response","_this2","data","Data","errorMessage","this","components_ErrorMessage","onSubmit","onChange","map","c","key","CoinInfo","Name","FullName","type","Component","Result","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","App","scrollRef","React","createRef","result","loading","_callee","url","regenerator_default","wrap","_context","prev","next","concat","DISPLAY","current","scrollIntoView","behavior","stop","src_components_Spinner","entries","length","components_Result","src","image","alt","components_Form","ref","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8eeb3d0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptocurrencies.96e45d69.png\";","import React from 'react';\r\n\r\nconst ErrorMessage = ({ message }) => {\r\n  return <p className=\"error\">{message}</p>;\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    cryptocurrencies: [],\r\n    currency: '',\r\n    crypto: '',\r\n    error: false\r\n  };\r\n\r\n  async componentWillMount() {\r\n    const url = `https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD`;\r\n\r\n    await axios.get(url).then(response => {\r\n      this.setState({ cryptocurrencies: response.data.Data });\r\n    });\r\n  }\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { currency, crypto } = this.state;\r\n\r\n    if (currency === '' || crypto === '') {\r\n      this.setState({ error: true }, () => {\r\n        setTimeout(() => {\r\n          this.setState({ error: false });\r\n        }, 3000);\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const parameters = {\r\n      currency,\r\n      crypto\r\n    };\r\n\r\n    this.props.quote(parameters);\r\n  };\r\n\r\n  render() {\r\n    const errorMessage = this.state.error ? (\r\n      <ErrorMessage message=\"Fields are mandatories\" />\r\n    ) : (\r\n      ''\r\n    );\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        {errorMessage}\r\n        <div className=\"row\">\r\n          <label>Select your currency</label>\r\n          <select\r\n            name=\"currency\"\r\n            className=\"u-full-width\"\r\n            onChange={this.handleChange}\r\n          >\r\n            <option value=\"\">Select your currency</option>\r\n            <option value=\"USD\">USD - $</option>\r\n            <option value=\"ARS\">ARS - $</option>\r\n            <option value=\"MXN\">MXN - $</option>\r\n            <option value=\"GBP\">GBP - £</option>\r\n            <option value=\"EUR\">EUR - €</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div>\r\n            <label>Select your crypto</label>\r\n            <select\r\n              name=\"crypto\"\r\n              className=\"u-full-width\"\r\n              onChange={this.handleChange}\r\n            >\r\n              <option value=\"\">Select your crypto</option>\r\n              {this.state.cryptocurrencies.map(c => (\r\n                <option key={c.CoinInfo.Name} value={c.CoinInfo.Name}>\r\n                  {c.CoinInfo.FullName} - {c.CoinInfo.Name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <input\r\n          className=\"button-primary u-full-width\"\r\n          type=\"submit\"\r\n          value=\"Quote\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Result = ({ data }) => {\r\n  return (\r\n    <div className=\"resultado\">\r\n      <h2>Result</h2>\r\n      <p className=\"precio\">\r\n        The price is <span>{data.PRICE}</span>\r\n      </p>\r\n      <p>\r\n        Highest price of the day: <span>{data.HIGHDAY}</span>\r\n      </p>\r\n      <p>\r\n        Lowest price of the day: <span>{data.LOWDAY}</span>\r\n      </p>\r\n      <p>\r\n        Last 24 hours variation: <span>{data.CHANGEPCT24HOUR}%</span>\r\n      </p>\r\n      <p>\r\n        Last update: <span>{data.LASTUPDATE}</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div class=\"sk-circle\">\r\n      <div class=\"sk-circle1 sk-child\" />\r\n      <div class=\"sk-circle2 sk-child\" />\r\n      <div class=\"sk-circle3 sk-child\" />\r\n      <div class=\"sk-circle4 sk-child\" />\r\n      <div class=\"sk-circle5 sk-child\" />\r\n      <div class=\"sk-circle6 sk-child\" />\r\n      <div class=\"sk-circle7 sk-child\" />\r\n      <div class=\"sk-circle8 sk-child\" />\r\n      <div class=\"sk-circle9 sk-child\" />\r\n      <div class=\"sk-circle10 sk-child\" />\r\n      <div class=\"sk-circle11 sk-child\" />\r\n      <div class=\"sk-circle12 sk-child\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react';\nimport image from './cryptocurrencies.png';\nimport Form from './components/Form';\nimport axios from 'axios';\nimport Result from './components/Result';\nimport Spinner from './components/Spinner';\n\nclass App extends React.Component {\n  scrollRef = React.createRef();\n\n  state = {\n    result: {},\n    loading: false\n  };\n\n  quote = async ({ currency, crypto }) => {\n    const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${crypto}&tsyms=${currency}`;\n\n    await axios.get(url).then(response => {\n      this.setState(\n        {\n          result: response.data.DISPLAY[crypto][currency],\n          loading: true\n        },\n        () => {\n          this.scrollRef.current.scrollIntoView({ behavior: 'smooth' });\n          setTimeout(() => {\n            this.setState({ loading: false });\n          }, 2000);\n        }\n      );\n    });\n  };\n\n  render() {\n    const result = this.state.loading ? (\n      <Spinner />\n    ) : (\n      Object.entries(this.state.result).length !== 0 && (\n        <Result data={this.state.result} />\n      )\n    );\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <img src={image} alt=\"cyptocurrencies\" className=\"logotipo\" />\n          </div>\n          <div className=\"one-half column\">\n            <h1>Price Cryptocurrencies Instantly</h1>\n            <Form quote={this.quote} />\n            <div ref={this.scrollRef}>{result}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}